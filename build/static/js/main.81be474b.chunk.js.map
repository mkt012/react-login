{"version":3,"sources":["components/inputText.jsx","components/formContainer.jsx","components/loginForm.jsx","dashboard/usertable.jsx","dashboard/index.jsx","protectedroutes.jsx","App.js","serviceWorker.js","dashboard/store.jsx","index.js"],"names":["Input","props","groupClasses","ClassName","Object","assign","inputClasses","className","name","type","value","placeholder","onChange","FormContainer","state","username","password","errors","userblank","passwordblank","handleUserName","bind","handlePassword","handleSubmit","e","this","setState","target","console","log","data","sessionStorage","setItem","history","push","match","preventDefault","onSubmit","title","class","Component","LoginContainer","usertable","key","i","id","age","gender","email","phoneNo","dashboard","logout","clear","fetchUser","window","addEventListener","go","accessData","undefined","userValue","user","map","item","onClick","connect","datauser","dispatch","ProtectedRoute","isEnabled","component","Dashboard","to","App","path","exact","getItem","Boolean","location","hostname","initialState","reducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81be474b.chunk.js","sourcesContent":["import React from 'react'; \r\nimport PropTypes from 'prop-types'; \r\nimport ClassName from 'classnames';\r\n\r\nconst Input = (props) => {\r\n\tlet groupClasses = ClassName(Object.assign({\r\n\t\t'form-group' : true\r\n\t}, props.groupClasses));\r\n\tlet inputClasses = ClassName(Object.assign({\r\n\t\t'form-control' : true\r\n\t}), props.inputClasses)\r\n\r\nreturn (  \r\n\t\t  <div className={groupClasses}>\r\n\t\t\t<input\r\n\t\t      name={props.name}\r\n\t\t      type={props.type}\r\n\t\t      value={props.value}\r\n\t\t      className={inputClasses}\r\n             placeholder={props.placeholder} \r\n             onChange ={props.onChange}\r\n\t\t    />\r\n\t\t  </div>\r\n\t)\r\n}\r\n\r\nInput.propTypes = {\r\n\tname: PropTypes.string,\r\n\ttype: PropTypes.oneOf(['text', 'password']).isRequired,\r\n\tvalue:  PropTypes.string,\r\n\tplaceholder: PropTypes.string,\r\n\tonChange: PropTypes.func,\r\n\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\n\r\nimport data from './data/api.json';\r\nimport Input from './inputText.jsx';\r\n\r\n\r\nclass FormContainer extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n     this.state = {\r\n          username: \" \",\r\n          password:\" \",\r\n          errors: false,\r\n          userblank: false,\r\n          passwordblank: false\r\n\r\n     } \r\n\r\n    this.handleUserName = this.handleUserName.bind(this);\r\n    this.handlePassword = this.handlePassword.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n}\r\n\r\n\r\nhandleUserName(e){\r\n\r\n\r\n     this.setState({ username: e.target.value })\r\n    //console.log('history', this.props.history)\r\n}\r\n\r\nhandlePassword(e){\r\n\r\n     this.setState({ password: e.target.value })\r\n}\r\n\r\nhandleSubmit(e){\r\n\r\nconsole.log(\"user::\", this.state.username);\r\nconsole.log(\"pass::\", this.state.password);\r\n\r\nif((data.username === this.state.username) && (data.password === this.state.password)){\r\n     this.setState({userblank:false, passwordblank: false})\r\n    sessionStorage.setItem('login', true)\r\n    this.props.history.push(\"/dashboard\")\r\n}\r\n\r\nif(this.state.username === \" \"){\r\n  this.setState({userblank: true})\r\nconsole.log('userblank', this.state.userblank)\r\n}\r\n\r\nif(this.state.password ===  \" \"){\r\n  this.setState({passwordblank: true})\r\nconsole.log('passwordblank', this.state.passwordblank)\r\n}\r\n\r\nif((data.username !== this.state.username && (this.state.username.match(/(.+)@(.+){2,}\\.(.+){2,}/) != null))  && (data.password !== this.state.password)){\r\n  this.setState({errors: true})\r\n}\r\ne.preventDefault();\r\n}\r\n\r\nrender(){\r\n  return(\r\n      <>\r\n\t\t\t\t<form onSubmit={(e)=>{this.handleSubmit(e)}}>\r\n         \r\n         <Input  \r\n          title= \"Username\"\r\n          type={'text'}  \r\n          name= {'name'}  \r\n          placeholder = {'Enter your username'}\r\n          onChange = {this.handleUserName}\r\n          groupClasses={ {'form-group' : true} }\r\n          inputClasses={ {'form-control' : true} }\r\n          \r\n        />\r\n\r\n        {(this.state.userblank === true ? <span class=\"err-text\">Field cannot be blank</span> : null) || \r\n        (this.state.errors === true ? <span class=\"err-text\">Please enter the valid credential</span> : null)}\r\n\r\n         <Input  \r\n          title= \"Password\"\r\n          type={'password'}  \r\n          name= {'password'}  \r\n          placeholder = {'Enter your password'}\r\n          onChange = {this.handlePassword}\r\n          groupClasses={ {'form-group' : true} }\r\n          inputClasses={ {'form-control' : true} }\r\n          \r\n        />\r\n\r\n        {this.state.passwordblank === true ? <span class=\"err-text\">Field cannot be blank</span> : null}\r\n\r\n          <div className=\"form-group action mb0\">\r\n            <button type=\"submit\" className=\"btn pull-right\">Submit</button>\r\n           </div>\r\n\r\n        </form>\r\n\t\t\t</>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FormContainer;\r\n","import React from 'react';\r\nimport FormContainer from './formContainer.jsx';\r\n\r\nconst LoginContainer = (props) => {\r\n    return(\r\n      <>\r\n    <div className=\"page_banner head\">\r\n      <div className=\"container\">\r\n        <h1 className=\"head wow fadeInUp\">USER LOGIN</h1>\r\n      </div> \r\n    </div> \r\n    <div className=\"cms contact\">\r\n      <div className=\"container\">\r\n        <div className=\"box\">\r\n          <h4>Login</h4>\r\n           <FormContainer history={props.history}/>\r\n          </div> \r\n      </div>\r\n    </div>\r\n      </>\r\n    )\r\n  }\r\n\r\nexport default LoginContainer;","import React from 'react';\r\n\r\nfunction usertable(props) {\r\nconsole.log('props', props.data);\r\n\r\n  return (\r\n        \r\n             <tr key={props.data.i}>\r\n                    <td>{props.data.id}</td>\r\n                    <td>{props.data.name}</td>\r\n                    <td>{props.data.age}</td>\r\n                    <td>{props.data.gender}</td>\r\n                    <td>{props.data.email}</td>\r\n                    <td>{props.data.phoneNo}</td>\r\n                    </tr> \r\n    \r\n  );\r\n}\r\n\r\nexport default usertable;","import React, { Component } from 'react';\r\nimport { connect} from 'react-redux';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport data from './data/api.json';\r\nimport Usertable from './usertable.jsx';\r\n\r\nclass dashboard extends Component {  \r\n\r\nconstructor(props) {\r\n    super(props);\r\n    \r\n}\r\n\r\ncomponentDidMount() {\r\n   this.props.fetchUser(data);\r\n   const { history } = this.props;\r\n     window.addEventListener(\"popstate\", () => {\r\n        history.go(1);\r\n    });\r\n\r\n}\r\n\r\nlogout = () => {\r\n     sessionStorage.clear();\r\n     this.props.history.push(\"/\")\r\n }\t\r\n\r\nrender(){\r\n  //console.log('data', data);\r\n\t//console.log('userValue::', this.props.userValue.user)\t\r\n const accessData = this.props.userValue.user !== undefined ? this.props.userValue.user.map((item,i) => \r\n             <Usertable data={item} key={`key_${i}`} /> ) : null\r\n\r\nreturn(\r\n <>\r\n    <div className=\"top-wrap page_banner\">\r\n         <div className=\"container\">\r\n        \t\t <h1>User Data</h1>\r\n        \t</div>\r\n         </div>\r\n         <div className=\"container box\">\r\n       \t\t<div className=\"table-wrap\">\r\n         \t<table className=\"table\">\r\n         \t\t<thead>\r\n         \t\t\t<tr>\r\n         \t\t\t  <th>ID</th>\r\n         \t\t\t   <th>Name</th>\r\n         \t\t\t    <th>Age</th>\r\n         \t\t\t     <th>Gender</th>\r\n         \t\t\t      <th>Email</th>\r\n         \t\t\t       <th>phoneNo</th>\r\n\t\t\t\t\t\t    </tr>\r\n         \t\t  </thead>\r\n         \t\t<tbody>\r\n         \t\t\t{accessData }\r\n         \t\t</tbody>\r\n         \t</table>\r\n           </div>\r\n            <button onClick={this.logout} type=\"button\" className=\"btn\">Logout</button>\r\n         </div>\r\n          \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n return{\r\n    userValue:state.datauser\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return{\r\n      fetchUser: (data) => dispatch({type: 'USER_UPDATE', value: data})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(dashboard);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport Dashboard from './dashboard/index.jsx';\r\nconst ProtectedRoute = ({isEnabled, ...props}) => {\r\n    return (isEnabled) ? <Route {...props} component={Dashboard}/> : <Redirect to=\"/\" />;\r\n};\r\n\r\nexport default ProtectedRoute;","import React from 'react';\nimport { Route, BrowserRouter as Router, Switch} from 'react-router-dom';\nimport LoginContainer from './components/loginForm.jsx';\nimport ProtectedRoute from './protectedroutes.jsx';\n\nimport './media/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n     <Router>\n        <div>\n            <Switch>\n              <Route path=\"/\" exact component={LoginContainer} />\n              <ProtectedRoute path=\"/dashboard\" isEnabled={sessionStorage.getItem('login')} />\n             </Switch> \n           </div>\n        </Router> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n   datauser: ''\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n     if(action.type === 'USER_UPDATE'){\r\n\t\treturn{...state, datauser: action.value};\r\n\t}\r\n\treturn state; \r\n\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from './dashboard/store.jsx';\n\nconst store = createStore(reducer);\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}